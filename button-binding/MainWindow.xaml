<Window x:Class="button_binding.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:c="clr-namespace:converters"
        Title="MainWindow" Height="350" Width="525">
    <Window.Resources>
        <!--Get a reference to the window to establish View Context-->
        <RelativeSource x:Key="View" Mode="FindAncestor" AncestorType="{x:Type Window}" />
        <c:NoOpConverter x:Key="NoOpConverter"></c:NoOpConverter>
        <!--Custom Button backgrounds-->
        <LinearGradientBrush x:Key="Button.Static.Background.custom" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FF2C0606" Offset="1"/>
            <GradientStop Color="#FFE6C7C7"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="Button.MouseOver.Background.custom" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FF2C0606" Offset="1"/>
            <GradientStop  Color="#7CACE6"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="Button.Checked.Background.custom" EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FF2C0606" Offset="1"/>
            <GradientStop x:Name="GradientStop" Color="#7CE684"/>
        </LinearGradientBrush>
        <!--Button Style and Control templatek-->
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" 
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" 
                                   StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <RelativeSource x:Key="BindParent" Mode ="Self" />
        <SolidColorBrush x:Key="Button.Static.Background" Color="#D39797"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#C4F6CE"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <ControlTemplate x:Key="ToggleControlTemplate1" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" 
                                  Content="{TemplateBinding Content, Converter={StaticResource NoOpConverter}}" 
                                  ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" 
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                  Margin="{TemplateBinding Padding}" 
                                  RecognizesAccessKey="True" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" 
                            Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="border" 
                            Value="{StaticResource Button.MouseOver.Background.custom}"/>
                    <Setter Property="BorderBrush" TargetName="border" 
                            Value="{StaticResource Button.MouseOver.Border}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" TargetName="border" 
                            Value="{StaticResource Button.Pressed.Border}"/>
                    <Setter Property="BorderBrush" TargetName="border" 
                            Value="{StaticResource Button.Pressed.Background}"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Background" TargetName="border" 
                            Value="{StaticResource Button.Checked.Background.custom}"/>
                    <Setter Property="BorderBrush" TargetName="border" 
                            Value="{StaticResource Button.Static.Border}"/>
                    <Setter TargetName="contentPresenter" Property="ContentPresenter.Content"
                            Value="{Binding Content[0], RelativeSource={RelativeSource TemplatedParent}}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" TargetName="border" 
                            Value="{StaticResource Button.Disabled.Background}"/>
                    <Setter Property="BorderBrush" TargetName="border" 
                            Value="{StaticResource Button.Disabled.Border}"/>
                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" 
                            Value="{StaticResource Button.Disabled.Foreground}"/>
                </Trigger>
                
                <!-- Toggle content based on state -->
                <Trigger Property="ToggleButton.IsChecked" Value="False">
                    <Setter TargetName="contentPresenter" Property="ContentPresenter.Content"
                            Value="{Binding Content[1], RelativeSource={RelativeSource TemplatedParent}}" />
                </Trigger>
                
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="buttons" TargetType="{x:Type ButtonBase}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Button.Background" Value="{StaticResource Button.Static.Background.custom}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="3,3,3,3"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Template" Value="{StaticResource ToggleControlTemplate1}"></Setter>
        </Style>
    </Window.Resources>
    <StackPanel>
        <StackPanel Margin="100,100,100,0" Orientation="Vertical" HorizontalAlignment="Stretch">
            <ToggleButton x:Name="button0"
                    Content="{Binding Button0.Options, RelativeSource={StaticResource View}}"
                    Style="{StaticResource buttons}" />
            <ToggleButton x:Name="button1" 
                    Content="{Binding Button1.Options, RelativeSource={StaticResource View}}"
                    Style="{StaticResource buttons}" />
            <ToggleButton Name="button2"
                    Content="{Binding Button2.Options, RelativeSource={StaticResource View}}"
                    Style="{StaticResource buttons}" />
            <Button Content="{Binding ModelButton.Options, RelativeSource={StaticResource View}}" 
                    Command="{Binding TargetButton.Push}"  
                    Style="{StaticResource buttons}" />
        </StackPanel>
    </StackPanel>
</Window>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    